from datetime import datetime

import requests
from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from geopy.geocoders import Nominatim

from core.keyboards.needhelp import confirm_help_ikb, share_location_kb
from core.utils.states_location import StatesNeedHelp

i_need_help_router = Router()


@i_need_help_router.message(Command("i_need_help"))
async def need_help_handler(message: Message, state: FSMContext):
    await message.answer(
        "—è–∫—â–æ –≤–∏ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ –¥–æ–ø–æ–º–æ–≥–∏ - –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç.\n\n"
        "‚ùï –∑–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ä–∞–∑–æ–º —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Å—Ç—å—Å—è —ñ –≤–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è."
        "—Ç–æ–º—É, —è–∫—â–æ –≤–∏ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ - —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è /fill_data\n\n"
        "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏\n\n"
        "‚úèÔ∏è –ø–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª—é—á–Ω–æ –∑ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é. –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –ø–∫ - —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Å–∞–π—Ç–æ–º",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(StatesNeedHelp.GET_CAPTION)


# Cancellation option
@i_need_help_router.message(Command("cancel"), StateFilter(StatesNeedHelp))
@i_need_help_router.message(F.text.casefold() == "cancel", StateFilter(StatesNeedHelp))
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "üî¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ!",
        reply_markup=ReplyKeyboardRemove(),
    )


@i_need_help_router.message(StatesNeedHelp.GET_CAPTION, F.text)
async def get_help_caption_handler(message: Message, state: FSMContext):
    await state.update_data(caption=message.text)
    await message.answer(
        "‚úèÔ∏è –æ–ø–∏—à—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥–∞–≤–∞—Ç–∏ –ø—ñ–¥—Ä–æ–±–∏—Ü—å"
    )
    await state.set_state(StatesNeedHelp.GET_DESCRIPTION)


@i_need_help_router.message(StatesNeedHelp.GET_CAPTION)
async def unwanted_help_caption_handler(message: Message):
    await message.answer(
        "‚ö†Ô∏è –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥–æ—é /skip\n.—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ - /cancel"
    )


@i_need_help_router.message(StatesNeedHelp.GET_DESCRIPTION, Command("skip"))
async def skip_description(message: Message, state: FSMContext):
    await state.update_data(description="–¥–µ—Ç–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
    await message.answer(
        "‚úèÔ∏è –¥–æ–±—Ä–µ, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ª–æ–∫–∞—Ü—ñ—î—é:", reply_markup=share_location_kb
    )
    await state.set_state(StatesNeedHelp.GET_LOCATION)


@i_need_help_router.message(StatesNeedHelp.GET_DESCRIPTION, F.text)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "‚úèÔ∏è –¥–æ–±—Ä–µ, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ª–æ–∫–∞—Ü—ñ—î—é:", reply_markup=share_location_kb
    )
    await state.set_state(StatesNeedHelp.GET_LOCATION)


@i_need_help_router.message(StatesNeedHelp.GET_DESCRIPTION)
async def unwanted_description(message: Message):
    await message.answer("‚ö†Ô∏è –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")


@i_need_help_router.message(StatesNeedHelp.GET_LOCATION, F.location)
async def get_location(message: Message, state: FSMContext):
    await state.update_data(latitude=message.location.latitude)
    await state.update_data(longitude=message.location.longitude)
    await message.answer(
        "‚úîÔ∏è –∑–∞–ø–∏—Å–∞–Ω–æ. –≤–∫–∞–∂—ñ—Ç—å –¥–µ–Ω—å, –Ω–∞ —è–∫–∏–π –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥-–º–º-—Ä—Ä—Ä—Ä:",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(StatesNeedHelp.GET_DATE)


@i_need_help_router.message(StatesNeedHelp.GET_LOCATION)
async def unwanted_location(message: Message, state: FSMContext):
    await message.reply(
        "‚ö†Ô∏è –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –¥–ª—è –ø–æ–¥–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó "
        "–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.\n\n"
        "—è–∫—â–æ –≤–∏ –∑ –ø—Ä–∏—Å—Ç—Ä–æ—é, —è–∫–∏–π –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é - —Å–ø—Ä–æ–±—É–π—Ç–µ "
        "–ø–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ {–ª—ñ–Ω–∫_–Ω–∞_—Å–∞–π—Ç}"
    )


@i_need_help_router.message(StatesNeedHelp.GET_DATE, F.text)
async def get_date_handler(message: Message, state: FSMContext):
    date_text = message.text
    try:
        # Attempt to parse the input string as a date
        date_object = str(datetime.strptime(date_text, "%d-%m-%Y"))
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥-–º–º-—Ä—Ä—Ä—Ä", reply_markup=ReplyKeyboardRemove()
        )
        return
    await state.update_data(date=date_object)

    context_data = await state.get_data()
    caption = context_data.get("caption")
    description = context_data.get("description")
    date = context_data.get("date")
    latitude = context_data.get("latitude")
    longitude = context_data.get("longitude")

    geolocator = Nominatim(user_agent="test_tg_bot")
    location = geolocator.reverse(f"{latitude},{longitude}")
    address = location.raw["address"]
    city = address.get("city", "")

    await message.answer(
        "‚úîÔ∏è –∑–∞–ø–∏—Å–∞–Ω–æ! –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–Ω—ñ:\n"
        f"–ø—Ä–æ–±–ª–µ–º–∞: {caption}\n"
        f"–æ–ø–∏—Å: {description}\n"
        f"–º—ñ—Å—Ç–æ: {city}\n"
        f"–¥–∞—Ç–∞: {date}",
        reply_markup=confirm_help_ikb,
    )

    await state.set_state(StatesNeedHelp.CHECK)


@i_need_help_router.callback_query(StatesNeedHelp.CHECK)
async def check_handler(callback: CallbackQuery, state: FSMContext):
    action = callback.data

    if action == "help_confirm":
        context = await state.get_data()
        caption = context.get("caption")
        description = context.get("description")
        date_time = context.get("date")
        latitude = context.get("latitude")
        longitude = context.get("longitude")

        request = {
            "user_id": callback.from_user.id,
            "name": caption,
            "description": description,
            "date_time": date_time,
            "coordinates": {"latitude": latitude, "longitude": longitude},
            "accessToken": "string",
        }
        response = requests.post(
            "https://hlp-me-back.onrender.com/local/dangers/create", json=request
        )

        await callback.message.answer(
            "‚úÖ –∑–∞–ø–∏—Ç –¥–æ–¥–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove()
        )
        print(response.status_code)
        print(response.json())

        await state.clear()
        await callback.answer()

    elif action == "help_decline":
        await callback.message.answer(
            "üî¥ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ. –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /i_need_help",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()
        await callback.answer()


# @i_need_help_router.callback_query()
# async def unwanted_callback_handler(callback: CallbackQuery):
#     await callback.answer()
